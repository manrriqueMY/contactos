{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Component","constructor","super","this","state","contacto","nombre","telefono","_id","contactos","Cambios","bind","addCon","componentDidMount","lsCon","n","e","con","target","value","setState","preventDefault","fetch","method","body","JSON","stringify","headers","rs","json","ms","window","M","toast","html","msg","delCon","id","ls","upCon","c","render","className","onSubmit","onChange","type","for","name","map","key","onClick","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b74e6daa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      contacto:{\r\n        nombre:'',\r\n        telefono:'',\r\n        _id:''\r\n      },\r\n      contactos:[]\r\n    };\r\n    this.Cambios=this.Cambios.bind(this);\r\n    this.addCon=this.addCon.bind(this);\r\n  }\r\n  async componentDidMount(){\r\n    this.lsCon();\r\n  }\r\n\r\n  Cambios(n,e){\r\n    let con=this.state.contacto;\r\n    con[n]=e.target.value;\r\n    this.setState({contacto:con});\r\n  }\r\n  async addCon(e){\r\n    e.preventDefault();\r\n    if(this.state.contacto._id){\r\n      const rs=await fetch(`/api/contacto/up/${this.state.contacto._id}`,{method:'PUT',\r\n        body:JSON.stringify({\r\n          nombre:this.state.contacto.nombre,\r\n          telefono:this.state.contacto.telefono\r\n        }),\r\n        headers:{'Accept':'application/json','Content-Type':'application/json'}\r\n      });\r\n      const ms=await rs.json();\r\n      this.setState({contacto:{nombre:'',telefono:'',_id:''}});\r\n      this.lsCon();\r\n      window.M.toast({html:ms.msg},2000);\r\n\r\n    }else{\r\n      const rs=await fetch(`/api/contacto/save`,{method:'POST',\r\n        body:JSON.stringify(this.state.contacto),\r\n        headers:{'Accept':'application/json','Content-Type':'application/json'}\r\n      });\r\n      const ms=await rs.json();\r\n      this.setState({contacto:{nombre:'',telefono:'',_id:''}});\r\n      this.lsCon();\r\n      window.M.toast({html:ms.msg},2000);\r\n    }\r\n  }\r\n  async delCon(id){\r\n    const rs=await fetch(`/api/contacto/del/${id}`,{method:'DELETE'});\r\n    const ls=await rs.json();\r\n    this.lsCon();\r\n    window.M.toast({html:ls.msg},2000);\r\n  }\r\n  async upCon(id){\r\n    const rs=await fetch(`/api/contacto/busca/${id}`);\r\n    const ls=await rs.json();\r\n    this.setState({contacto:{\r\n      nombre:ls.nombre,\r\n      telefono:ls.telefono,\r\n      _id:ls._id\r\n    }});    \r\n  }\r\n  async lsCon(){\r\n    const rs=await fetch(`/api/contacto/lista`);\r\n    const ls=await rs.json();\r\n    this.setState({contactos:ls.c});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"\">\r\n        <div className=\"row\">\r\n          <form onSubmit={this.addCon} className=\"col s12\">\r\n            <div className=\"row\">\r\n              <div className=\"input-field col s6\">\r\n                <i className=\"material-icons prefix\">account_circle</i>\r\n                <input onChange={this.Cambios.bind(this,\"nombre\")} value={this.state.contacto.nombre} id=\"icon_prefix\" type=\"text\" className=\"validate\"/>\r\n                <label for=\"icon_prefix\">First Name</label>\r\n              </div>\r\n              <div className=\"input-field col s6\">\r\n                <i className=\"material-icons prefix\">phone</i>\r\n                <input onChange={this.Cambios.bind(this,\"telefono\")} value={this.state.contacto.telefono} id=\"icon_telephone\" type=\"text\" className=\"validate\"/>\r\n                <label for=\"icon_telephone\">Telephone</label>\r\n              </div>\r\n              <div className=\"input-field col s6\">\r\n                <button className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Guardar\r\n                  <i className=\"material-icons right\">send</i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Nombre</th>\r\n              <th>Telefono</th>\r\n              <th>Editar</th>\r\n              <th>Eliminar</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.contactos.map(con=>{return(\r\n              <tr key={con._id}>\r\n                <th>{con.nombre}</th>\r\n                <th>{con.telefono}</th>\r\n                <th>                \r\n                  <button onClick={()=>this.upCon(con._id)} className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">\r\n                    <i className=\"material-icons right\">edit</i>\r\n                  </button>\r\n                </th>\r\n                <th>\r\n                  <button onClick={()=>this.delCon(con._id)} className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">\r\n                    <i className=\"material-icons right\">delete</i>\r\n                  </button>\r\n                </th>\r\n              </tr>\r\n            )})}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}